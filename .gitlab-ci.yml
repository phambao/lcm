# This file is a template, and might need editing before it works on your project.
# This example is for testing Django with MySQL.
#
# The test CI/CD variables MYSQL_DB, MYSQL_USER and MYSQL_PASS can be set in the project settings at:
#     Settings --> CI/CD --> Variables
#
# The Django settings in settings.py, used in tests, might look similar to:
#
#  DATABASES = {
#      'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': os.environ.get('MYSQL_DATABASE'),
#        	'USER':  os.environ.get('MYSQL_USER'),
#        	'PASSWORD': os.environ.get('MYSQL_PASSWORD'),
#       	'HOST': 'mysql',
#     	  'PORT': '3306',
#         'CONN_MAX_AGE':60,
#      },
#  }
#
# It is possible to use '--settings' to specify a custom settings file on the command line below or use an environment
# variable to trigger an include on the bottom of your settings.py:
#   if os.environ.get('DJANGO_CONFIG')=='test':
#       from .settings_test import *
#
# It is also possible to hardcode the database name and credentials in the settings.py file and in the .gitlab-ci.yml file.
#
# The mysql service needs some variables too. See https://hub.docker.com/_/mysql for possible mysql env variables
# Note that when using a service in GitLab CI/CD that needs environment variables to run, only variables defined in
# .gitlab-ci.yml are passed to the service and variables defined in the GitLab UI are not.
# https://gitlab.com/gitlab-org/gitlab/-/issues/30178

variables:
  # DJANGO_CONFIG: "test"
    ENVIRONMENT: development
    DB_ENGINE: django.db.backends.postgresql
    DB_HOST: postgres
    DB_PORT: 5432
    DB_NAME: lcm
    DB_PASSWORD: openpgpwd
    DB_USER: openpg
    POSTGRES_DB: $DB_NAME
    POSTGRES_USER: $DB_USER
    POSTGRES_PASSWORD: $DB_PASSWORD
    POSTGRES_HOST_AUTH_METHOD: trust
    STRIPE_SECRET_KEY: sk_test_51NN9dpE4OZckNkJ54bksNl7qbfONbBeJdvsY1XGSrXBVllwVhMani8Q3rNTy5WgVO1v455P6XXyLQdDcmiATEQrF00NE3sX2EE
    STRIPE_PUBLIC_KEY: pk_test_51NN9dpE4OZckNkJ5DAG3np9OLxqoa13NZrQmzcq0bph7SJtKA5PpxdbsHFywgebuIaDyMkyc5cV2JVlDAALCbTDq0028GUtUq3
    ENDPOINT_SECRET: whsec_9e199d91e07b5b7a61cfc34c3ebf882d1553e681d5ee03448133c84486e16419

default:
  image: ubuntu:20.04
  #
  # Pick zero or more services to be used on all builds.
  # Only needed when using a docker container to run your tests in.
  # Check out: https://docs.gitlab.com/ee/ci/services/index.html
  services:
    - postgres:12.2-alpine
  #
  # This folder is cached between builds
  # http://docs.gitlab.com/ee/ci/yaml/README.html#cache
  cache:
    paths:
      - ~/.cache/pip/
  before_script:
    - apt -y update
    - apt -y install apt-utils python3-pip
    - DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends tzdata
    - apt-get install -y postgresql postgresql-client libpq-dev
    - apt -y upgrade
    - service postgresql start
    - pip3 install -r requirements.txt --break-system-packages


migrations:
  services:
    - postgres
  image: postgres
  stage: build
  script:
    - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT 'OK' AS status;"
    - python3 manage.py makemigrations
    # - python3 manage.py makemigrations myapp
    - python3 manage.py migrate
    - python3 manage.py check
    - python3 manage.py loaddata catalog
    - python3 manage.py test
